{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"main_PyTorch.ipynb","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMyM86OI2lkJpDAmeCAZvnc"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"Nz7zDemgQM5m","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"status":"ok","timestamp":1599744930618,"user_tz":-540,"elapsed":1165,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"928443c5-1847-40e3-e602-43f7fe084d9b"},"source":["%pwd"],"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'/content'"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"code","metadata":{"id":"1CAUBQkGQ_b5","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":131},"executionInfo":{"status":"ok","timestamp":1599744963421,"user_tz":-540,"elapsed":29903,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"ee74b740-7a78-482a-f529-460446924f96"},"source":["from google.colab import drive\n","drive.mount('../content/drive', force_remount=True)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","4/4AHC4AeQ09OXf6wm8v4E40tRpXGLJJEqlfpj0JbtKSPhogvGQpioWHE\n","Mounted at ../content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Oe8BvCzIFFyL","colab_type":"text"},"source":["# 바꿔야할 부분\n","※ 경로"]},{"cell_type":"code","metadata":{"id":"oFfFh2VA1UvB","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"status":"ok","timestamp":1599744964541,"user_tz":-540,"elapsed":693,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"cc26a517-668a-466f-eb48-c88d931ec1ae"},"source":["cd ../content/drive/My Drive/졸업작품/30words_classification"],"execution_count":3,"outputs":[{"output_type":"stream","text":["/content/drive/My Drive/졸업작품/30words_classification\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"P8k_tmSQREIi","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599744972040,"user_tz":-540,"elapsed":5553,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}}},"source":["''' import libraries '''\n","\n","%matplotlib inline\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","from torchvision.transforms import transforms  # 1 batch = (1, 784)\n","from torch.autograd import Variable\n","from torch.utils.data.dataloader import DataLoader\n","from matplotlib import pyplot as plt\n","import numpy as np\n","from torchsummary import summary"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"JGOQJKoVwdqn","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":55},"executionInfo":{"status":"ok","timestamp":1599744973878,"user_tz":-540,"elapsed":987,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"ac2ec9ad-3c01-4bc2-b5d6-91b7f6501667"},"source":["# torch.device\n","print(\"is there cuda? :\",  torch.cuda.is_available())\n","device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","print(device)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["is there cuda? : True\n","cuda:0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"jz8bhrW82H-q","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599744986480,"user_tz":-540,"elapsed":11142,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}}},"source":["## data load\n","X_train, X_test, Y_train, Y_test = np.load(\"./data.npy\", allow_pickle=True)"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"QOg7Qu_MaseE","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":92},"executionInfo":{"status":"ok","timestamp":1599744989344,"user_tz":-540,"elapsed":1919,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"1f62d658-e7ff-4dfe-eb86-8d961bf9a06b"},"source":["## data rehspae and normalize\n","\n","Y_train = np.array([Y_train]) # (1, 27000, 30)\n","Y_train = np.transpose(Y_train, (1, 0, 2))  # (27000, 1, 30)\n","Y_test = np.array([Y_test]) # (1, 27000, 30)\n","Y_test = np.transpose(Y_test, (1, 0, 2))  # (27000, 1, 30)\n","\n","X_train = transforms.Normalize(mean=(0.0,), std=(1.0,))(torch.Tensor(X_train))\n","Y_train = transforms.Normalize(mean=(0.0,), std=(1.0,))(torch.Tensor(Y_train))\n","\n","X_test = transforms.Normalize(mean=(0.0,), std=(1.0,))(torch.Tensor(X_test))\n","Y_test = transforms.Normalize(mean=(0.0,), std=(1.0,))(torch.Tensor(Y_test))\n","\n","print(\"X_train.shape\", X_train.shape)  # (27000, 173, 24)\n","print(\"Y_train.shape\", Y_train.shape)  # (27000, 1, 30)\n","print(\"X_test.shape\", X_test.shape)  # (3000, 173, 24)\n","print(\"Y_test.shape\", Y_test.shape)  # (1, 27000, 30)\n","# print(\"X_train[0]\", X_train[0])  # 이미 되어있네? mean=0, std=1 로 되어있네\n"],"execution_count":7,"outputs":[{"output_type":"stream","text":["X_train.shape torch.Size([27000, 173, 24])\n","Y_train.shape torch.Size([27000, 1, 30])\n","X_test.shape torch.Size([3000, 173, 24])\n","Y_test.shape torch.Size([3000, 1, 30])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XTOpUUvFBYzh","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":55},"executionInfo":{"status":"ok","timestamp":1599741470576,"user_tz":-540,"elapsed":1445,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"3a21c6dc-697c-42c6-9db3-8486382ef34b"},"source":["print(Y_train[0])"],"execution_count":24,"outputs":[{"output_type":"stream","text":["tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.]])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"2Jmd7gYq6Y-I","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599745004700,"user_tz":-540,"elapsed":1219,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}}},"source":["num_mfcc = 24\n","Tx = 173\n","num_class = 30"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"W5nQY_IAS-tH","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599745006825,"user_tz":-540,"elapsed":1027,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}}},"source":["''' Build Network, CNN '''\n","class CNN_Net(nn.Module):\n","    def __init__(self, p=0.0):\n","        super(CNN_Net, self).__init__()\n","\n","        # MNIST 는 정형화되어있잖아, 직사각형 input도 다뤄볼 줄 알아야해.\n","\n","        # L1 In shape=(?, 1, Tx, n_mfcc)\n","        #    Conv     -> (?, 32, Tx, n_mfcc)\n","        #    Pool     -> (?, 32, 86, 12)\n","        self.conv_layer1 = nn.Sequential( # kernel_size = (5,3) 가로 세로 달리 가능.\n","            nn.Conv2d(in_channels=1, out_channels=32, kernel_size=3, stride=1, padding=1),\n","            nn.ReLU(),\n","            nn.MaxPool2d(kernel_size=2, stride=2))\n","        \n","        # L2 ImgIn shape=(?, 32, 86, 12)\n","        #    Conv      ->(?, 64, 86, 12)\n","        #    Pool      ->(?, 64, 43, 6)\n","        self.conv_layer2 = nn.Sequential(\n","            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n","            nn.ReLU(),\n","            nn.MaxPool2d(kernel_size=2, stride=2))\n","        \n","        # L3 ImgIn shape=(?, 64, 43, 6)\n","        #    Conv      ->(?, 128, 43, 6)\n","        #    Pool      ->(?, 128, 22, 4)\n","        self.conv_layer3 = nn.Sequential(\n","            nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),\n","            nn.ReLU(),\n","            nn.MaxPool2d(kernel_size=2, stride=2, padding=1))\n","\n","        self.before_fc1 = nn.Linear(22 * 4 * 128, 625, bias=True) # 계산하는거 맞네!\n","        nn.init.xavier_uniform_(self.before_fc1.weight)\n","\n","        # FC1 4x4x128 inputs -> 625 outputs\n","        self.fc1 = nn.Sequential(\n","            self.before_fc1,  \n","            nn.ReLU(),\n","            nn.Dropout(p=p))\n","        \n","        # FC2 625 inputs -> 10 outputs\n","        self.fc2 = nn.Linear(625, num_class, bias=True)\n","        #nn.init.xavier_uniform_(self.fc2.weight)\n","\n","    def forward(self, x):\n","        x = x.float()\n","        out = self.conv_layer1(x)\n","        out = self.conv_layer2(out)\n","        out = self.conv_layer3(out)\n","        out = out.view(out.size(0), -1)   # Flatten them for FC\n","        out = self.fc1(out)\n","        out = self.fc2(out)\n","\n","        out = nn.LogSoftmax(dim=-1)(out)\n","        return out"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"bkn6D2YBTIrt","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599745018680,"user_tz":-540,"elapsed":9307,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}}},"source":["''' hyper parameters '''\n","# total_batch_num = int(len(train_data) / batch_size)\n","epochs = 20\n","lr = 0.001\n","print_interval = 100\n","drop_prob = 0.2 # 0.2 # 0=적용 안함. -> 모델에서도 빼줌..\n","\n","# model, optimizer 초기화\n","model = CNN_Net(p=drop_prob).to(device)  # train 코드에서 모듈 model 호출될 때마다 forward 자동 실행!\n","optimizer = optim.Adam(model.parameters(), lr=lr)"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"hqqquQIATbnd","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":521},"executionInfo":{"status":"ok","timestamp":1599745021549,"user_tz":-540,"elapsed":1155,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"9eab6278-d442-4fa5-855d-bb7de884345f"},"source":["summary(model,input_size=(1, Tx, num_mfcc))"],"execution_count":12,"outputs":[{"output_type":"stream","text":["----------------------------------------------------------------\n","        Layer (type)               Output Shape         Param #\n","================================================================\n","            Conv2d-1          [-1, 32, 173, 24]             320\n","              ReLU-2          [-1, 32, 173, 24]               0\n","         MaxPool2d-3           [-1, 32, 86, 12]               0\n","            Conv2d-4           [-1, 64, 86, 12]          18,496\n","              ReLU-5           [-1, 64, 86, 12]               0\n","         MaxPool2d-6            [-1, 64, 43, 6]               0\n","            Conv2d-7           [-1, 128, 43, 6]          73,856\n","              ReLU-8           [-1, 128, 43, 6]               0\n","         MaxPool2d-9           [-1, 128, 22, 4]               0\n","           Linear-10                  [-1, 625]       7,040,625\n","           Linear-11                  [-1, 625]       7,040,625\n","             ReLU-12                  [-1, 625]               0\n","          Dropout-13                  [-1, 625]               0\n","           Linear-14                   [-1, 30]          18,780\n","================================================================\n","Total params: 14,192,702\n","Trainable params: 14,192,702\n","Non-trainable params: 0\n","----------------------------------------------------------------\n","Input size (MB): 0.02\n","Forward/backward pass size (MB): 4.02\n","Params size (MB): 54.14\n","Estimated Total Size (MB): 58.18\n","----------------------------------------------------------------\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"PbtWJOqpxMWa","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":317},"executionInfo":{"status":"ok","timestamp":1599745026205,"user_tz":-540,"elapsed":1269,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"7ab6e8d8-e792-4f20-e8a0-31afb78f1e1b"},"source":["# 모델의 state_dict 출력\n","for param_tensor in model.state_dict():\n","    print(param_tensor, \"\\t\", model.state_dict()[param_tensor].size())\n","    # model.state_dict()[param_tensor].dat => 접근가능하네!\n","# 옵티마이저의 state_dict 출력\n","print(\"Optimizer's state_dict:\")\n","for var_name in optimizer.state_dict():\n","    print(var_name, \"\\t\", optimizer.state_dict()[var_name])"],"execution_count":13,"outputs":[{"output_type":"stream","text":["conv_layer1.0.weight \t torch.Size([32, 1, 3, 3])\n","conv_layer1.0.bias \t torch.Size([32])\n","conv_layer2.0.weight \t torch.Size([64, 32, 3, 3])\n","conv_layer2.0.bias \t torch.Size([64])\n","conv_layer3.0.weight \t torch.Size([128, 64, 3, 3])\n","conv_layer3.0.bias \t torch.Size([128])\n","before_fc1.weight \t torch.Size([625, 11264])\n","before_fc1.bias \t torch.Size([625])\n","fc1.0.weight \t torch.Size([625, 11264])\n","fc1.0.bias \t torch.Size([625])\n","fc2.weight \t torch.Size([30, 625])\n","fc2.bias \t torch.Size([30])\n","Optimizer's state_dict:\n","state \t {}\n","param_groups \t [{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]}]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"xw2q_FgiN-I1","colab_type":"text"},"source":["# 왜지?  \n","MNIST 코드에서,   \n","target.size = [batch_size]   \n","output.size = [batch_size, num_class]\n","\n","F.nll_loss(output, target) -> 이 함수 요상하다\n","\n","# 읽어볼 만한 것\n","https://wingnim.tistory.com/34"]},{"cell_type":"code","metadata":{"id":"iDdPXxZ5TMM9","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1599747559436,"user_tz":-540,"elapsed":1089348,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"001673e1-4e42-4155-8b9b-e636190d7807"},"source":["# 통일성 있게 코드 짜자.\n","train_epoch_loss = []\n","train_epoch_acc = []\n","test_epoch_loss = []\n","test_epoch_acc = []\n","\n","batch_size = 50\n","\n","for epoch in range(epochs):\n","\n","    ''' Train '''\n","    model.train()\n","    train_batch_loss = []\n","    train_batch_acc = []\n","   \n","    \n","    train_batch_num = int(len(X_train)/batch_size)\n","    # print(\"train_batch_num: \", train_batch_num)\n","    for batch_idx in range(train_batch_num):\n","        \n","        mini_batch_x = X_train[batch_idx*batch_size:(batch_idx+1)*batch_size] # (50, 173, 24)\n","        mini_batch_x = mini_batch_x.unsqueeze(1) # (50, 1, 173, 24)\n","        mini_batch_y = Y_train[batch_idx*batch_size:(batch_idx+1)*batch_size]\n","        x, target = Variable(mini_batch_x).to(device), Variable(mini_batch_y.long()).to(device)\n","\n","        optimizer.zero_grad()\n","        output = model(x) # output.shape = (50, 30)\n","        target = target.squeeze(1)  # (50, 1, 30) -> (50, 30)\n","        target = torch.argmax(target, dim=1) # -> (50) \n","        # print(output.shape)\n","        # print(target.shape)\n","\n","        loss = F.nll_loss(output, target).to(device)\n","\n","        # loss = nn.CrossEntropyLoss(output, target).to(device) \n","        \n","        loss.backward()    # calc gradients\n","        train_batch_loss.append(loss.item()/batch_size*100) # from tensor -> get value loss.item() or loss.data\n","        optimizer.step()   # update gradients\n","        prediction = output.argmax(dim=1, keepdims=True)\n","        accuracy = torch.true_divide(prediction.eq(target.view_as(prediction)).sum().data, batch_size)*100\n","        train_batch_acc.append(accuracy)\n","        if batch_idx % print_interval == 0:\n","            print('epoch: {}\\tbatch Step: {}\\tLoss: {:.3f}\\tAccuracy: {:.3f}'.format(\n","                    epoch, batch_idx, train_batch_loss[batch_idx], train_batch_acc[batch_idx]))\n","\n","    train_epoch_loss.append(np.sum(train_batch_loss)/train_batch_num)\n","    train_epoch_acc.append(np.sum(train_batch_acc)/train_batch_num)\n","\n","\n","    ''' Test '''\n","    model.eval()\n","    test_batch_loss = []\n","    test_batch_acc = []\n","    \n","    test_batch_num = int(len(X_test)/batch_size)\n","    # print(\"train_batch_num: \", test_batch_num)\n","    with torch.no_grad():\n","        for batch_idx in range(test_batch_num):         \n","            mini_batch_x = X_test[batch_idx*batch_size:(batch_idx+1)*batch_size] # (50, 173, 24)\n","            mini_batch_x = mini_batch_x.unsqueeze(1) # (50, 1, 173, 24)\n","            mini_batch_y = Y_test[batch_idx*batch_size:(batch_idx+1)*batch_size]\n","            x, target = Variable(mini_batch_x).to(device), Variable(mini_batch_y.long()).to(device)\n","\n","            optimizer.zero_grad()\n","            output = model(x) # output.shape = (50, 30)\n","            target = target.squeeze(1)  # (50, 1, 30) -> (50, 30)\n","            target = torch.argmax(target, dim=1) # -> (50) \n","\n","            x, target = Variable(x).to(device), Variable(target).to(device)\n","            output = model(x)\n","            test_batch_loss.append(loss.item()/batch_size*100)\n","            prediction = output.argmax(dim=1, keepdims=True)\n","            accuracy = torch.true_divide(prediction.eq(target.view_as(prediction)).sum().data, batch_size)*100\n","            test_batch_acc.append(accuracy)\n","\n","    test_epoch_loss.append(np.sum(test_batch_loss)/test_batch_num)\n","    test_epoch_acc.append(np.sum(test_batch_acc)/test_batch_num)\n","\n","\n","''' save results to numpy '''\n","train_test_result = (train_epoch_loss, test_epoch_loss, train_epoch_acc, test_epoch_acc)\n","np.save(\"result.npy\", train_test_result)\n","\n","print(\"==================================\")\n","print(\"train_epoch_loss:\", train_epoch_loss)\n","print(\"test_epoch_loss:\", test_epoch_loss)\n","print(\"train_epoch_acc\", train_epoch_acc)\n","print(\"test_epoch_acc\", test_epoch_acc)\n","print(\"==================================\")\n","x = np.arange(start=1, stop=len(train_epoch_loss)+1, step=1)\n","\n","fig = plt.figure(figsize=(12, 3))\n","ax1 = fig.add_subplot(1, 2, 1)\n","plt.plot(x, train_epoch_loss, label='train')\n","plt.plot(x, test_epoch_loss, label='test')\n","ax1.legend()\n","ax1.set(ylabel=\"Loss\", xlabel='epoch')\n","\n","ax2 = fig.add_subplot(1, 2, 2)\n","plt.plot(x, train_epoch_acc, label='train')\n","plt.plot(x, test_epoch_acc, label='test')\n","ax2.legend()\n","ax2.set(ylabel=\"Accuracy\", xlabel='epoch')\n","\n","plt.show()\n","\n","# ''' inference를 위한 모델 저장  '''\n","model_save_type = [\"all\", \"state_dict\", \"ckp\"]  # 학습 재개를 위해서 ckp 저장 권장 // else state_dict\n","model_name = \"./CNN\"\n","option = 2\n","\n","if option == 0:\n","    model_path = model_name + '_all.pt'\n","    torch.save(model, model_path)\n","\n","elif option == 1:\n","    model_path = model_name + '_state_dict.pt'\n","    torch.save(model.state_dict, model_path)\n","\n","elif option == 2:\n","    model_path = model_name + '_ckp.tar'\n","    torch.save({\n","            'last_epoch': epochs -1,\n","            'model_state_dict': model.state_dict(),\n","            'optimizer_state_dict': optimizer.state_dict(),\n","            'loss': loss,\n","            }, model_path)\n","    "],"execution_count":33,"outputs":[{"output_type":"stream","text":["train_batch_num:  540\n","epoch: 0\tbatch Step: 0\tLoss: 1.746\tAccuracy: 70.000\n","epoch: 0\tbatch Step: 100\tLoss: 2.347\tAccuracy: 64.000\n","epoch: 0\tbatch Step: 200\tLoss: 2.682\tAccuracy: 62.000\n","epoch: 0\tbatch Step: 300\tLoss: 2.139\tAccuracy: 62.000\n","epoch: 0\tbatch Step: 400\tLoss: 1.812\tAccuracy: 68.000\n","epoch: 0\tbatch Step: 500\tLoss: 1.705\tAccuracy: 74.000\n","train_batch_num:  60\n","train_batch_num:  540\n","epoch: 1\tbatch Step: 0\tLoss: 1.156\tAccuracy: 82.000\n","epoch: 1\tbatch Step: 100\tLoss: 1.814\tAccuracy: 80.000\n","epoch: 1\tbatch Step: 200\tLoss: 2.119\tAccuracy: 76.000\n","epoch: 1\tbatch Step: 300\tLoss: 1.347\tAccuracy: 74.000\n","epoch: 1\tbatch Step: 400\tLoss: 1.415\tAccuracy: 78.000\n","epoch: 1\tbatch Step: 500\tLoss: 1.605\tAccuracy: 78.000\n","train_batch_num:  60\n","train_batch_num:  540\n","epoch: 2\tbatch Step: 0\tLoss: 1.379\tAccuracy: 78.000\n","epoch: 2\tbatch Step: 100\tLoss: 1.789\tAccuracy: 72.000\n","epoch: 2\tbatch Step: 200\tLoss: 1.315\tAccuracy: 80.000\n","epoch: 2\tbatch Step: 300\tLoss: 1.501\tAccuracy: 74.000\n","epoch: 2\tbatch Step: 400\tLoss: 1.100\tAccuracy: 82.000\n","epoch: 2\tbatch Step: 500\tLoss: 1.099\tAccuracy: 82.000\n","train_batch_num:  60\n","train_batch_num:  540\n","epoch: 3\tbatch Step: 0\tLoss: 0.819\tAccuracy: 90.000\n","epoch: 3\tbatch Step: 100\tLoss: 1.512\tAccuracy: 82.000\n","epoch: 3\tbatch Step: 200\tLoss: 1.011\tAccuracy: 84.000\n","epoch: 3\tbatch Step: 300\tLoss: 0.828\tAccuracy: 88.000\n","epoch: 3\tbatch Step: 400\tLoss: 1.317\tAccuracy: 78.000\n","epoch: 3\tbatch Step: 500\tLoss: 1.065\tAccuracy: 82.000\n","train_batch_num:  60\n","train_batch_num:  540\n","epoch: 4\tbatch Step: 0\tLoss: 0.929\tAccuracy: 88.000\n","epoch: 4\tbatch Step: 100\tLoss: 1.646\tAccuracy: 76.000\n","epoch: 4\tbatch Step: 200\tLoss: 0.979\tAccuracy: 86.000\n","epoch: 4\tbatch Step: 300\tLoss: 0.782\tAccuracy: 90.000\n","epoch: 4\tbatch Step: 400\tLoss: 0.912\tAccuracy: 84.000\n","epoch: 4\tbatch Step: 500\tLoss: 0.957\tAccuracy: 80.000\n","train_batch_num:  60\n","train_batch_num:  540\n","epoch: 5\tbatch Step: 0\tLoss: 0.908\tAccuracy: 84.000\n","epoch: 5\tbatch Step: 100\tLoss: 0.852\tAccuracy: 82.000\n","epoch: 5\tbatch Step: 200\tLoss: 1.099\tAccuracy: 82.000\n","epoch: 5\tbatch Step: 300\tLoss: 0.738\tAccuracy: 88.000\n","epoch: 5\tbatch Step: 400\tLoss: 1.040\tAccuracy: 78.000\n","epoch: 5\tbatch Step: 500\tLoss: 0.888\tAccuracy: 88.000\n","train_batch_num:  60\n","train_batch_num:  540\n","epoch: 6\tbatch Step: 0\tLoss: 0.857\tAccuracy: 84.000\n","epoch: 6\tbatch Step: 100\tLoss: 0.398\tAccuracy: 92.000\n","epoch: 6\tbatch Step: 200\tLoss: 0.910\tAccuracy: 84.000\n","epoch: 6\tbatch Step: 300\tLoss: 1.133\tAccuracy: 84.000\n","epoch: 6\tbatch Step: 400\tLoss: 1.056\tAccuracy: 78.000\n","epoch: 6\tbatch Step: 500\tLoss: 0.724\tAccuracy: 88.000\n","train_batch_num:  60\n","train_batch_num:  540\n","epoch: 7\tbatch Step: 0\tLoss: 0.899\tAccuracy: 88.000\n","epoch: 7\tbatch Step: 100\tLoss: 0.889\tAccuracy: 84.000\n","epoch: 7\tbatch Step: 200\tLoss: 0.714\tAccuracy: 88.000\n","epoch: 7\tbatch Step: 300\tLoss: 0.458\tAccuracy: 88.000\n","epoch: 7\tbatch Step: 400\tLoss: 0.479\tAccuracy: 90.000\n","epoch: 7\tbatch Step: 500\tLoss: 0.613\tAccuracy: 92.000\n","train_batch_num:  60\n","train_batch_num:  540\n","epoch: 8\tbatch Step: 0\tLoss: 0.550\tAccuracy: 94.000\n","epoch: 8\tbatch Step: 100\tLoss: 0.669\tAccuracy: 88.000\n","epoch: 8\tbatch Step: 200\tLoss: 0.676\tAccuracy: 94.000\n","epoch: 8\tbatch Step: 300\tLoss: 0.428\tAccuracy: 96.000\n","epoch: 8\tbatch Step: 400\tLoss: 0.835\tAccuracy: 90.000\n","epoch: 8\tbatch Step: 500\tLoss: 0.755\tAccuracy: 86.000\n","train_batch_num:  60\n","train_batch_num:  540\n","epoch: 9\tbatch Step: 0\tLoss: 0.502\tAccuracy: 90.000\n","epoch: 9\tbatch Step: 100\tLoss: 0.459\tAccuracy: 88.000\n","epoch: 9\tbatch Step: 200\tLoss: 0.615\tAccuracy: 90.000\n","epoch: 9\tbatch Step: 300\tLoss: 0.310\tAccuracy: 96.000\n","epoch: 9\tbatch Step: 400\tLoss: 0.317\tAccuracy: 98.000\n","epoch: 9\tbatch Step: 500\tLoss: 0.498\tAccuracy: 88.000\n","train_batch_num:  60\n","train_batch_num:  540\n","epoch: 10\tbatch Step: 0\tLoss: 0.282\tAccuracy: 96.000\n","epoch: 10\tbatch Step: 100\tLoss: 0.540\tAccuracy: 90.000\n","epoch: 10\tbatch Step: 200\tLoss: 0.382\tAccuracy: 94.000\n","epoch: 10\tbatch Step: 300\tLoss: 0.919\tAccuracy: 90.000\n","epoch: 10\tbatch Step: 400\tLoss: 0.416\tAccuracy: 94.000\n","epoch: 10\tbatch Step: 500\tLoss: 0.367\tAccuracy: 92.000\n","train_batch_num:  60\n","train_batch_num:  540\n","epoch: 11\tbatch Step: 0\tLoss: 0.442\tAccuracy: 94.000\n","epoch: 11\tbatch Step: 100\tLoss: 0.255\tAccuracy: 96.000\n","epoch: 11\tbatch Step: 200\tLoss: 0.830\tAccuracy: 86.000\n","epoch: 11\tbatch Step: 300\tLoss: 0.447\tAccuracy: 96.000\n","epoch: 11\tbatch Step: 400\tLoss: 1.301\tAccuracy: 80.000\n","epoch: 11\tbatch Step: 500\tLoss: 0.557\tAccuracy: 92.000\n","train_batch_num:  60\n","train_batch_num:  540\n","epoch: 12\tbatch Step: 0\tLoss: 0.815\tAccuracy: 90.000\n","epoch: 12\tbatch Step: 100\tLoss: 0.445\tAccuracy: 94.000\n","epoch: 12\tbatch Step: 200\tLoss: 0.555\tAccuracy: 90.000\n","epoch: 12\tbatch Step: 300\tLoss: 0.398\tAccuracy: 92.000\n","epoch: 12\tbatch Step: 400\tLoss: 0.336\tAccuracy: 96.000\n","epoch: 12\tbatch Step: 500\tLoss: 0.511\tAccuracy: 88.000\n","train_batch_num:  60\n","train_batch_num:  540\n","epoch: 13\tbatch Step: 0\tLoss: 0.355\tAccuracy: 94.000\n","epoch: 13\tbatch Step: 100\tLoss: 0.287\tAccuracy: 98.000\n","epoch: 13\tbatch Step: 200\tLoss: 0.522\tAccuracy: 96.000\n","epoch: 13\tbatch Step: 300\tLoss: 0.448\tAccuracy: 92.000\n","epoch: 13\tbatch Step: 400\tLoss: 0.657\tAccuracy: 90.000\n","epoch: 13\tbatch Step: 500\tLoss: 0.279\tAccuracy: 92.000\n","train_batch_num:  60\n","train_batch_num:  540\n","epoch: 14\tbatch Step: 0\tLoss: 0.430\tAccuracy: 94.000\n","epoch: 14\tbatch Step: 100\tLoss: 0.501\tAccuracy: 92.000\n","epoch: 14\tbatch Step: 200\tLoss: 0.656\tAccuracy: 90.000\n","epoch: 14\tbatch Step: 300\tLoss: 0.829\tAccuracy: 86.000\n","epoch: 14\tbatch Step: 400\tLoss: 0.576\tAccuracy: 94.000\n","epoch: 14\tbatch Step: 500\tLoss: 0.199\tAccuracy: 96.000\n","train_batch_num:  60\n","train_batch_num:  540\n","epoch: 15\tbatch Step: 0\tLoss: 0.632\tAccuracy: 92.000\n","epoch: 15\tbatch Step: 100\tLoss: 1.044\tAccuracy: 88.000\n","epoch: 15\tbatch Step: 200\tLoss: 0.310\tAccuracy: 98.000\n","epoch: 15\tbatch Step: 300\tLoss: 0.216\tAccuracy: 98.000\n","epoch: 15\tbatch Step: 400\tLoss: 0.489\tAccuracy: 94.000\n","epoch: 15\tbatch Step: 500\tLoss: 0.251\tAccuracy: 98.000\n","train_batch_num:  60\n","train_batch_num:  540\n","epoch: 16\tbatch Step: 0\tLoss: 0.793\tAccuracy: 90.000\n","epoch: 16\tbatch Step: 100\tLoss: 0.278\tAccuracy: 96.000\n","epoch: 16\tbatch Step: 200\tLoss: 0.412\tAccuracy: 96.000\n","epoch: 16\tbatch Step: 300\tLoss: 0.422\tAccuracy: 92.000\n","epoch: 16\tbatch Step: 400\tLoss: 0.491\tAccuracy: 92.000\n","epoch: 16\tbatch Step: 500\tLoss: 0.216\tAccuracy: 94.000\n","train_batch_num:  60\n","train_batch_num:  540\n","epoch: 17\tbatch Step: 0\tLoss: 0.404\tAccuracy: 94.000\n","epoch: 17\tbatch Step: 100\tLoss: 1.249\tAccuracy: 86.000\n","epoch: 17\tbatch Step: 200\tLoss: 0.373\tAccuracy: 92.000\n","epoch: 17\tbatch Step: 300\tLoss: 0.221\tAccuracy: 96.000\n","epoch: 17\tbatch Step: 400\tLoss: 0.422\tAccuracy: 94.000\n","epoch: 17\tbatch Step: 500\tLoss: 0.123\tAccuracy: 100.000\n","train_batch_num:  60\n","train_batch_num:  540\n","epoch: 18\tbatch Step: 0\tLoss: 0.087\tAccuracy: 100.000\n","epoch: 18\tbatch Step: 100\tLoss: 0.361\tAccuracy: 94.000\n","epoch: 18\tbatch Step: 200\tLoss: 0.448\tAccuracy: 92.000\n","epoch: 18\tbatch Step: 300\tLoss: 0.172\tAccuracy: 96.000\n","epoch: 18\tbatch Step: 400\tLoss: 0.206\tAccuracy: 96.000\n","epoch: 18\tbatch Step: 500\tLoss: 0.949\tAccuracy: 92.000\n","train_batch_num:  60\n","train_batch_num:  540\n","epoch: 19\tbatch Step: 0\tLoss: 0.242\tAccuracy: 96.000\n","epoch: 19\tbatch Step: 100\tLoss: 0.530\tAccuracy: 90.000\n","epoch: 19\tbatch Step: 200\tLoss: 0.348\tAccuracy: 92.000\n","epoch: 19\tbatch Step: 300\tLoss: 0.173\tAccuracy: 98.000\n","epoch: 19\tbatch Step: 400\tLoss: 0.696\tAccuracy: 86.000\n","epoch: 19\tbatch Step: 500\tLoss: 0.697\tAccuracy: 86.000\n","train_batch_num:  60\n","==================================\n","train_epoch_loss: [1.986014390322897, 1.5994938417717262, 1.33308475403874, 1.1803935439498336, 1.0162272133760981, 0.9323755944216693, 0.8069730355783745, 0.7328289002456047, 0.6696662897727004, 0.6219505303573829, 0.5812851973981769, 0.5364452400900147, 0.5192451591637951, 0.44835530250091793, 0.44737997842193755, 0.4053475265977559, 0.3943147124170705, 0.37665098500955435, 0.35180404985806457, 0.3410902728102411]\n","test_epoch_loss: [1.9330116510391233, 2.1214592456817627, 1.6537299156188967, 1.050469994544983, 1.318903923034668, 1.1782835721969604, 1.2499713897705078, 0.8827755451202393, 0.9383014440536498, 0.9904201030731202, 0.7950497269630432, 0.6180117130279541, 0.8651741147041321, 0.32492682337760925, 1.5394068956375122, 0.9517422318458557, 0.5127509832382202, 0.4366062879562378, 0.6536186337471008, 0.5419697761535645]\n","train_epoch_acc [tensor(69.3926, device='cuda:0'), tensor(75.4741, device='cuda:0'), tensor(79.1333, device='cuda:0'), tensor(81.5852, device='cuda:0'), tensor(83.8556, device='cuda:0'), tensor(84.9593, device='cuda:0'), tensor(87.0518, device='cuda:0'), tensor(88.1926, device='cuda:0'), tensor(89.1704, device='cuda:0'), tensor(90.0370, device='cuda:0'), tensor(90.6667, device='cuda:0'), tensor(91.4926, device='cuda:0'), tensor(91.6778, device='cuda:0'), tensor(92.7889, device='cuda:0'), tensor(93.0185, device='cuda:0'), tensor(93.8630, device='cuda:0'), tensor(93.6926, device='cuda:0'), tensor(94.1963, device='cuda:0'), tensor(94.5000, device='cuda:0'), tensor(94.6778, device='cuda:0')]\n","test_epoch_acc [tensor(72.6000, device='cuda:0'), tensor(72.1667, device='cuda:0'), tensor(74.1000, device='cuda:0'), tensor(74.4667, device='cuda:0'), tensor(74.9000, device='cuda:0'), tensor(74.9667, device='cuda:0'), tensor(76.1667, device='cuda:0'), tensor(74.9000, device='cuda:0'), tensor(75.5667, device='cuda:0'), tensor(75.0333, device='cuda:0'), tensor(75.0667, device='cuda:0'), tensor(75.1333, device='cuda:0'), tensor(75.0333, device='cuda:0'), tensor(75.3333, device='cuda:0'), tensor(74.4000, device='cuda:0'), tensor(73.7667, device='cuda:0'), tensor(73.5333, device='cuda:0'), tensor(75.7000, device='cuda:0'), tensor(75.0333, device='cuda:0'), tensor(75.7667, device='cuda:0')]\n","==================================\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 864x216 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"L1ZLE1WBXU3O","colab_type":"text"},"source":["## audio test\n","https://musicinformationretrieval.com/ipython_audio.html"]},{"cell_type":"code","metadata":{"id":"Taz0d4xLWi-g","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599747579874,"user_tz":-540,"elapsed":3843,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}}},"source":["import IPython.display as ipd\n","import librosa\n","\n","def match_1s(data):\n","    # 30sec 길이 통일\n","    num = 22050\n","    # print(data.shape, end=' ->')\n","    if len(data) < 22050:\n","        num = 22050 - len(data)\n","        temp = np.zeros(num) #* 1e-05\n","        data = np.append(data, temp)\n","    elif len(data) > 22050:\n","        data = data[:22050]\n","\n","    #print(data.shape, end=' ')\n","\n","    # (22050,) to column vector : (2250, 1)\n","    # data = data.reshape(len(data), 1)\n","\n","    return data\n","\n","\n","def feature_mfcc(RECORD_FILE_NAME):\n","\n","    # 조정할 수 있는 건 다 적어보자.\n","\n","    # sr = 22050 = bitrate/2 -> Q. bitrate 와 어떤 관계?\n","    # Generate mfccs from a time series\n","    # t초당 sig.shape = (t*sr,)\n","    sig, sr = librosa.load(RECORD_FILE_NAME)  # , sr=sr\n","    # 만약, sr=16000, mfcc.shape = (n_mfcc,1251)\n","    #       sr=(default)22050, mfcc.shape = (n_mfcc, 1723)\n","\n","\n","    hop_length = 0\n","    if len(sig) == 22050:  # 128 -> mfcc Tx 301, 223 -> mfcc Tx 173\n","        hop_length = 128\n","    elif len(sig) == 38433:\n","        hop_length = 223  # Tx 173 으로 통일\n","    elif len(sig) < 22050:\n","        # print(\"smaller than\", end=' ')\n","        sig = match_1s(sig)\n","        hop_length = 128\n","\n","    else:\n","        # print(len(sig))\n","        sig = match_1s(sig)\n","        print(\"1s over\")\n","        hop_length = 128\n","\n","    n_mfcc = 24\n","    # n_mels = 20\n","    n_fft = 101\n","    fmin = 0\n","    fmax = None\n","    # sr = 16000\n","\n","\n","    mfcc = librosa.feature.mfcc(y=sig, sr=sr, hop_length=hop_length, fmin=fmin, fmax = fmax,\n","                                  n_fft= n_fft, n_mfcc=n_mfcc)\n","    # print(\"here\", mfcc.shape)\n","\n","    return mfcc"],"execution_count":34,"outputs":[]},{"cell_type":"code","metadata":{"id":"p62zmBePXERa","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":74},"executionInfo":{"status":"ok","timestamp":1599749922779,"user_tz":-540,"elapsed":2295,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"9da8dc45-d741-48f3-df90-1aa13d648be6"},"source":["audio_path = 'three_not_mine.wav' # 'stop_not_mine.wav' # 'extraction.wav'\n","ipd.Audio(audio_path)"],"execution_count":90,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","                <audio controls=\"controls\" >\n","                    <source src=\"data:audio/x-wav;base64,\" type=\"audio/x-wav\" />\n","                    Your browser does not support the audio element.\n","                </audio>\n","              "],"text/plain":["<IPython.lib.display.Audio object>"]},"metadata":{"tags":[]},"execution_count":90}]},{"cell_type":"code","metadata":{"id":"n9BF-uXEW2Jb","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":93},"executionInfo":{"status":"ok","timestamp":1599749929061,"user_tz":-540,"elapsed":1217,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"385e2a4d-6251-4f85-f66b-b9f02ef14819"},"source":["mfcc = feature_mfcc(audio_path)\n","print(mfcc.shape)"],"execution_count":91,"outputs":[{"output_type":"stream","text":["(24, 173)\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/librosa/filters.py:284: UserWarning: Empty filters detected in mel frequency basis. Some channels will produce empty responses. Try increasing your sampling rate (and fmax) or reducing n_mels.\n","  warnings.warn('Empty filters detected in mel frequency basis. '\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"J31wFkZzZviK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1599749931662,"user_tz":-540,"elapsed":1574,"user":{"displayName":"SEON MI KIM","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitwPSDPPyi_4aqh7Tz9mW1IrKf3wKSXo-_NiGU=s64","userId":"03562068581376268377"}},"outputId":"4712d310-17b0-4b06-887a-12dd4b95cfec"},"source":["''' 모델 불러오기 '''\n","\n","model_save_type = [\"all\", \"state_dict\", \"ckp\"]  # 학습 재개를 위해서 ckp 저장 권장 // else state_dict\n","model_name = \"./CNN\"\n","option = 2\n","\n","if option == 0:\n","    # 모델 클래스는 어딘가에 반드시 선언되어 있어야 합니다\n","    model_path = model_name + '_all.pt'\n","    model = torch.load(model_path)\n","\n","elif option == 1:\n","    model_path = model_name + '_state_dict.pt'\n","    model = CNN_Net()\n","    model.load_state_dict(torch.load(model_path))\n","\n","elif option == 2:\n","    # model, optimizer 초기화\n","    model = CNN_Net()\n","    optimizer = optim.Adam(model.parameters(), lr=lr)\n","\n","    model_path = model_name + '_ckp.tar'\n","    checkpoint = torch.load(model_path)\n","    model.load_state_dict(checkpoint['model_state_dict'])\n","    optimizer.load_state_dict(checkpoint['optimizer_state_dict'])\n","    last_epoch = checkpoint['last_epoch']\n","    loss = checkpoint['loss']\n","\n","\n","''' Audio Test '''\n","\n","classes = ['bed', 'bird', 'cat', 'dog', 'down', \n","           'eight', 'five', 'four', 'go', 'happy', \n","           'house', 'left', 'marvin', 'nine', 'no', \n","           'off', 'on', 'one', 'right', 'seven', \n","           'sheila', 'six', 'stop', 'three', 'tree', \n","           'two', 'up', 'wow', 'yes', 'zero']\n","\n","model.eval()\n","\n","with torch.no_grad():\n","    # mfcc.shape = (24, 173) -> (batch_szie=1, channel=1, 173, 24)\n","    x = np.expand_dims(np.transpose(mfcc, (0, 1)), axis=(0, 1))\n","\n","    output = model(Variable(torch.Tensor(x))) # output.shape = (1, 30)\n","    print(output.shape)\n","    output = torch.exp(output).float()\n","    for i in range(num_class):\n","        print(classes[i], \":\", output[0][i])\n","    prediction = output.argmax(dim=1, keepdims=True)\n","    print(\"prediction : \", classes[prediction])\n","\n","\n","model.eval()\n","model.cuda()\n","test_batch_num = int(len(X_test)/batch_size)\n","# print(\"train_batch_num: \", test_batch_num)\n","with torch.no_grad():\n","    for batch_idx in range(test_batch_num):         \n","        mini_batch_x = X_test[batch_idx*batch_size:(batch_idx+1)*batch_size] # (50, 173, 24)\n","        mini_batch_x = mini_batch_x.unsqueeze(1) # (50, 1, 173, 24)\n","        mini_batch_y = Y_test[batch_idx*batch_size:(batch_idx+1)*batch_size]\n","        x, target = Variable(mini_batch_x).to(device), Variable(mini_batch_y.long()).to(device)\n","\n","    output = model(x) # output.shape = (1, 30)\n","    prediction = output.argmax(dim=1, keepdims=True)\n","    for b in range(batch_size):\n","        print(\"target :\", classes[target[b].argmax(dim=1).item()], \" || prediction :\", classes[prediction[b]])\n"],"execution_count":92,"outputs":[{"output_type":"stream","text":["torch.Size([1, 30])\n","bed : tensor(0.)\n","bird : tensor(0.)\n","cat : tensor(0.)\n","dog : tensor(0.)\n","down : tensor(0.)\n","eight : tensor(0.)\n","five : tensor(0.)\n","four : tensor(0.)\n","go : tensor(1.2300e-31)\n","happy : tensor(0.)\n","house : tensor(0.)\n","left : tensor(1.)\n","marvin : tensor(0.)\n","nine : tensor(0.)\n","no : tensor(0.)\n","off : tensor(2.8678e-41)\n","on : tensor(0.)\n","one : tensor(0.)\n","right : tensor(7.7930e-32)\n","seven : tensor(0.)\n","sheila : tensor(0.)\n","six : tensor(0.)\n","stop : tensor(3.9383e-14)\n","three : tensor(0.)\n","tree : tensor(0.)\n","two : tensor(0.)\n","up : tensor(0.)\n","wow : tensor(0.)\n","yes : tensor(0.)\n","zero : tensor(0.)\n","prediction :  left\n","target : zero  || prediction : zero\n","target : house  || prediction : house\n","target : bed  || prediction : bed\n","target : one  || prediction : four\n","target : on  || prediction : up\n","target : dog  || prediction : no\n","target : nine  || prediction : nine\n","target : tree  || prediction : tree\n","target : no  || prediction : no\n","target : house  || prediction : house\n","target : go  || prediction : nine\n","target : dog  || prediction : dog\n","target : go  || prediction : go\n","target : on  || prediction : on\n","target : three  || prediction : zero\n","target : wow  || prediction : wow\n","target : left  || prediction : left\n","target : up  || prediction : up\n","target : five  || prediction : six\n","target : dog  || prediction : dog\n","target : down  || prediction : down\n","target : marvin  || prediction : marvin\n","target : right  || prediction : nine\n","target : no  || prediction : no\n","target : zero  || prediction : zero\n","target : five  || prediction : five\n","target : up  || prediction : up\n","target : bird  || prediction : bird\n","target : zero  || prediction : zero\n","target : house  || prediction : house\n","target : marvin  || prediction : marvin\n","target : dog  || prediction : go\n","target : yes  || prediction : yes\n","target : one  || prediction : one\n","target : nine  || prediction : nine\n","target : down  || prediction : nine\n","target : six  || prediction : six\n","target : nine  || prediction : five\n","target : no  || prediction : no\n","target : cat  || prediction : cat\n","target : five  || prediction : five\n","target : four  || prediction : on\n","target : four  || prediction : four\n","target : bird  || prediction : bird\n","target : two  || prediction : two\n","target : stop  || prediction : stop\n","target : yes  || prediction : yes\n","target : one  || prediction : four\n","target : down  || prediction : down\n","target : dog  || prediction : dog\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"6SpjDXS1dMzD","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]}]}